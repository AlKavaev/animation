#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass literate-jss
\begin_preamble
\title{\pkg{animation}: An \proglang{R} Package for Creating Animations and Demonstrating Statistical Methods}


\author{Yihui Xie\\
Department of Statistics \& Statistical Laboratory, Iowa State
University}

\Plaintitle{animation: An R Package for Creating Animations and Demonstrating Statistical Methods}
\Shorttitle{An R Package for Creating Animations and Demonstrating Statistical Methods}

\Plainauthor{Yihui Xie}

\Abstract{Animated graphs that demonstrate statistical ideas and methods can both attract interest and assist understanding.  In this paper we first discuss how animations can be related to some statistical topics such as iterative algorithms, random simulations, (re)sampling methods and dynamic trends, then we describe the approaches that may be used to create animations, and give an overview to the \proglang{R} package \pkg{animation} \citep{animation}, including its design, usage and the statistical topics in the package. With the \pkg{animation} package, we can export the animations produced by \proglang{R} into a variety of formats, such as a web page, a GIF animation, a Flash movie, a PDF document, or a MP4/AVI video, so that users can publish the animations fairly easily. The design of this package is flexible enough to be readily incorporated into web applications, e.g., we can generate animations online with Rweb \citep{Rweb}, which means we do not even need \proglang{R} to be installed locally to create animations. We will show examples of the use of animations in teaching statistics and in the presentation of statistical reports using Sweave \citep{Sweave}. In fact, this paper itself was written with Sweave and the \pkg{animation} package, so that readers can watch the animations in real time when they read the paper (they only work in the Adobe Reader).

Animations can add insight and interest to traditional static approaches to teaching statistics and reporting, making statistics a more interesting and appealing subject.}

\Keywords{animation, statistical demonstration, simulation, web application, reproducible research, \proglang{R}}

\Plainkeywords{animation, statistical demonstration, simulation, web application, reproducible research, R}

\Address{Yihui Xie\\
Department of Statistics \& Statistical Laboratory\\
Iowa State University\\
102 Snedecor Hall, Ames, IA 50011\\
United States of America\\
E-mail: \email{xie@yihui.name}\\
URL: \url{http://yihui.name}, \url{http://animation.yihui.name}}

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{}
%% \Issue{}
%% \Month{}
%% \Year{}
%% \Submitdate{}
%% \Acceptdate{}

%\usepackage[nogin,noae]{Sweave}
\usepackage{tikz}
\usepackage[buttonsize=1em]{animate}
%\VignetteIndexEntry{animation: An R Package for Creating Animations and Demonstrating Statistical Methods}
\hypersetup{pdfstartview=FitH}
\end_preamble
\options article
\use_default_options false
\language english
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Flex Sweave Options
status open

\begin_layout Plain Layout

eps=FALSE,pdf=FALSE,tidy=TRUE,echo=FALSE,external=TRUE,prefix.string=figure/Rfig
\end_layout

\end_inset


\end_layout

\begin_layout Scrap
<<setup,echo=FALSE>>=
\end_layout

\begin_layout Scrap
pdf.options(family = 'Palatino')
\end_layout

\begin_layout Scrap
options(width = 84,digits=3)
\end_layout

\begin_layout Scrap
library(animation)
\end_layout

\begin_layout Scrap
## requires an additional tool 'qpdf' (it's free software)
\end_layout

\begin_layout Scrap
ani.options(qpdf = 'qpdf', ani.dev = 'pdf', ani.type = 'pdf', ani.height = 5,
 ani.width = 5, outdir = getwd())
\end_layout

\begin_layout Scrap
set.seed(31415)  # for reproducibility
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The range of statistical methods, models and computer implementations now
 available is very wide indeed.
 Both students in statistics, and application area specialists who find
 that they need to master and use statistical methodology, require effective
 means of entrance into this extensive body of ideas, theories, and practical
 computer implementations.
 Effective visual demonstrations can be useful aids in the mastering of
 concepts.
 Statistical analysis uses computer algorithms to process data, with the
 user then required to interpret results.
 Even with a good training in mathematics, it can be hard to understand
 the motivation for a statistical algorithm, or how it works in processing
 data.
\end_layout

\begin_layout Standard
An obvious application is the simulation of limiting distributions.
 Not only is it possible to illustrate the central limit theorem (CLT);
 one can show how the CLT fails if the observations come from a population
 with infinite variance.
 This can be done moreover, both in a simulation (sampling from a theoretical
 distribution) and resampling (sampling from an empirical distribution)
 context.
 The bootstrap sampling distribution of the mean is a simple use of sampling
 from an empirical distribution.
\end_layout

\begin_layout Standard
Technological advances in data capture and deployment have led to large
 increases in the size and complexity of data sets.
 This creates new challenges those who work on the analysis of such data.
 Often, as for example in the analysis of gene expression data, the challenges
 have substantial statistical novelty.
 Consider, as an example, methods that select, on the basis of a measure
 of discriminatory power, a few genes from among a large group of genes,
 in order to discriminate between previously assigned groups.
 Simulation, and associated animations, can be an excellent tool for conveying
 the process of selection.
\end_layout

\begin_layout Standard
Traditional static printed statistical reports have severe limitations,
 for conveying results with some degree of complexity to an audience that
 is not trained to understand the statistical ideas.
 Here, an active animated way to present results can help greatly.
 The human visual cortex is arguably the most powerful computing system
 to which we have access.
 Visualization puts information in a form that uses the power of this computing
 system.
 By virtue of our visual system, we may be able to quickly understand a
 complicated method or result, or at least a simplified case.
\end_layout

\begin_layout Standard
The 
\series bold
animation
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citep
key "animation"

\end_inset

 was designed mainly for two purposes: 
\end_layout

\begin_layout Enumerate
to demonstrate ideas, concepts, theories and methods in statistics through
 animations;
\end_layout

\begin_layout Enumerate
to provide utilities to export animations to other formats (e.g., GIF, Flash
 and various video formats) or write animations into other files such as
 HTML pages and Sweave documents;
\end_layout

\begin_layout Standard
The literature on animations in demonstrating statistical ideas is, to date,
 relatively limited; in contrast, there has been active research in the
 area of dynamic and interactive graphics for decades, which is mainly focused
 on data analysis.
 The most similar project to the 
\series bold
animation
\series default
 package in the literature might be the GASP (Globally Accessible Statistical
 Procedures, available at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.stat.sc.edu/rsrch/gasp/
\end_layout

\end_inset

), which seems to be a very early collection of statistical routines for
 data analysis and statistical education.
 Most of these routines were based on Java Applets and HTML forms using
 CGI to handle users' input.
 These techniques have become rare nowadays over the Internet, and as we
 know, it is much more convenient to use 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 to do statistical computing and graphics than Java today.
\end_layout

\begin_layout Standard
In terms of conveying statistical ideas, there are two similar packages
 to the 
\series bold
animation
\series default
 package: the 
\series bold
TeachingDemos
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citep
key "TeachingDemos"

\end_inset

 and the 
\series bold
rpanel
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citep
key "rpanel"

\end_inset

, both of which are based on 
\series bold
tcltk
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "tcltk"

\end_inset

 to create graphical user interfaces (GUI) for interactive graphics.
 There are a number of other sophisticated packages focused on building
 GUI's, e.g., 
\series bold
RGtk2
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "RGtk2"

\end_inset

 and 
\series bold
gWidgets
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "gWidgets"

\end_inset

.
 At the same time, several 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 packages are especially designed for interactive statistical graphics,
 such as 
\series bold
iplots
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "iplots"

\end_inset

 and 
\series bold
playwith
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "playwith"

\end_inset

 -- basic operations like brushing and identifying can be done in these
 packages.
 Moreover, there are also standalone dynamic and interactive graphics systems
 like GGobi 
\begin_inset CommandInset citation
LatexCommand citep
key "Cook2007"

\end_inset

 with the corresponding 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 package 
\series bold
rggobi
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "rggobi"

\end_inset

.
 This list of GUI-related packages and dynamic graphics systems is still
 far from exhaustive, however, we will see significant distinctions between
 them and the 
\series bold
animation
\series default
 package.
 As mentioned before, most of them are focused on data analysis, whereas
 the 
\series bold
animation
\series default
 package puts more emphasis on illustrating statistical ideas -- these illustrat
ions may or may not involve with data.
 At least so far the package has been mainly dealing with statistical methods
 and theories for pedagogical purposes.
 Another major difference is, the 
\series bold
animation
\series default
 package has flexible utilities to export 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 animations to other formats, among which we need to point out two formats
 especially: the first one is the HTML pages -- we can record the animation
 frames in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 and embed images into an HTML page to create an animation; this process
 does not depend on any third-party software and the output is like a common
 movie player (with navigation buttons), so it is an ideal tool to record
 a whole plotting process and demonstrate later to the audience; the other
 format is the animation in PDF documents, which is essentially created
 by the LaTeX package 
\series bold
animate
\series default
.
 With this approach, we can easily insert animations into Sweave documents,
 producing 
\begin_inset Quotes eld
\end_inset

reproducible animations
\begin_inset Quotes erd
\end_inset

 in our reports or papers.
\end_layout

\begin_layout Standard
This paper provides both a conceptual framework on how animations can be
 effectively related to statistical theories and ideas, and an introduction
 on the approaches to implement animations, in the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 language environment 
\begin_inset CommandInset citation
LatexCommand citep
key "Rlang"

\end_inset

.
 Before we move on, however, we need to point out that this paper itself
 was written in Sweave and the 
\series bold
animation
\series default
 package, as we shall see later that we can actually watch the animations
 in this document with the Adobe Reader.
 There was an editorial in the Journal of Computational and Graphical Statistics
 (JCGS) by 
\begin_inset CommandInset citation
LatexCommand citet
key "Levine10"

\end_inset

, encouraging authors to submit supplements containing animations, interactive
 3D graphics and movies, and finally 
\begin_inset Quotes eld
\end_inset

embed these dynamic graphics in the online articles themselves
\begin_inset Quotes erd
\end_inset

.
 Apparently the 
\series bold
animation
\series default
 package can be a helpful tool for these authors.
\end_layout

\begin_layout Section
\begin_inset OptArg
status open

\begin_layout Plain Layout
Statistics and animations
\end_layout

\end_inset

Statistics and animations
\begin_inset CommandInset label
LatexCommand label
name "sec:connection"

\end_inset


\end_layout

\begin_layout Standard
An animation is a rapid display of a sequence of images of 2D or 3D artwork
 or model positions in order to create an illusion of movement.
 It is an optical illusion of motion due to the phenomenon of persistence
 of vision, and can be created and demonstrated in a number of ways.
\end_layout

\begin_layout Standard
Animations can assist in a number of areas.
 For example, we can monitor the steps of K-Means cluster algorithm in multivari
ate statistics, simulate the approximation of the sampling distribution
 of 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

 to normal distribution as the sample size 
\begin_inset Formula $n$
\end_inset

 increases, or simply show the dynamic trends of the time-series data as
 time passes by, etc.
 The common characteristic of these examples is that they all involve with
 multiple steps and we may use a 
\emph on
sequence
\emph default
 of images to illustrate the process.
 The sequence of images forms the base of an animation.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rotation"

\end_inset

 is a primitive illustration of how a rotation in an animation is constructed
 based on a sequence of images.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<rotation, fig=TRUE, echo=FALSE, height=2.5, width=6>>=
\end_layout

\begin_layout Scrap
palette(c("black", "red"))
\end_layout

\begin_layout Scrap
op = par(mar = rep(0, 4))
\end_layout

\begin_layout Scrap
plot(x <- c(1:4, 4:1), y <- rep(2:1, each = 4), ann = F,
\end_layout

\begin_layout Scrap
    type = "n", axes = F, xlim = c(0.55, 4.45), ylim = c(0.55,
\end_layout

\begin_layout Scrap
        2.45), xaxs = "i", yaxs = "i")
\end_layout

\begin_layout Scrap
rect(x - 0.45, y - 0.45, x + 0.45, y + 0.45, border = "darkgray")
\end_layout

\begin_layout Scrap
s = seq(0, 360, length = 8)
\end_layout

\begin_layout Scrap
for (i in 1:8) {
\end_layout

\begin_layout Scrap
    text(x[i], y[i], "Animation", srt = s[i], col = i,
\end_layout

\begin_layout Scrap
        cex = 0.5 + 40 * i/360)
\end_layout

\begin_layout Scrap
}
\end_layout

\begin_layout Scrap
text(x, y - 0.45, paste("00:0", 1:8, sep = ""), adj = c(0.5,
\end_layout

\begin_layout Scrap
    -0.2), col = "darkgray", cex = 0.75, font = 2)
\end_layout

\begin_layout Scrap
arrows(c(1:3 + 0.35, 4:2 - 0.35), rep(2:1, each = 3),
\end_layout

\begin_layout Scrap
    c(1:3 + 0.65, 4:2 - 0.65), rep(2:1, each = 3), length = 0.15,
\end_layout

\begin_layout Scrap
    col = "darkgray")
\end_layout

\begin_layout Scrap
arrows(4, 1.55, 4, 1.45, length = 0.1, col = "darkgray")
\end_layout

\begin_layout Scrap
par(op)
\end_layout

\begin_layout Scrap
palette("default")
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An illustration of a sequence of images: the basic constitution of an animation.
 See 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{demo('wordrotation', package = 'animation')}
\end_layout

\end_inset

 for the real animation.
\begin_inset CommandInset label
LatexCommand label
name "fig:rotation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After a review of some common statistical theories and applications, we
 think there are generally four types of scenarios as follows in which animation
s may play a useful and interesting role.
\end_layout

\begin_layout Subsection
Iterative algorithms
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<grad-desc-a,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({ani.options(interval = 0.2, nmax = 40)
\end_layout

\begin_layout Scrap
par(mar=c(4,4,2,.1),mgp=c(2,.9,0))
\end_layout

\begin_layout Scrap
grad.desc()
\end_layout

\begin_layout Scrap
},ani.opts='controls,autoplay,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\begin_inset Newline newline
\end_inset

@
\begin_inset Newline newline
\end_inset

<<grad-desc-b,results=tex>>=
\begin_inset Newline newline
\end_inset

saveLatex({ani.options(interval = 0.2, nmax = 50)
\end_layout

\begin_layout Scrap
par(mar=c(4,4,2,.1),mgp=c(2,1,0))
\end_layout

\begin_layout Scrap
f2 = function(x, y) sin(1/2 * x^2 - 1/4 * y^2 + 3) * 
\end_layout

\begin_layout Scrap
    cos(2 * x + 1 - exp(y))
\end_layout

\begin_layout Scrap
grad.desc(f2, c(-2, -2, 2, 2), c(-1, 0.5), gamma = 0.3, 
\end_layout

\begin_layout Scrap
    tol = 1e-04)
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Scrap

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The gradient descent algorithm applied to two bivariate objective functions
 with different step lengths.
 See the function 
\emph on
grad.desc()
\emph default
 in the 
\series bold
animation
\series default
 package.
\begin_inset CommandInset label
LatexCommand label
name "fig:grad-desc"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Iterative algorithms are widely used to derive estimates.
 Animation can help us monitor the detailed progress, inserting pauses as
 may be needed for the readers to follow the changes.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:grad-desc"

\end_inset

 is a demonstration of the 
\begin_inset Quotes eld
\end_inset

gradient descent algorithm
\begin_inset Quotes erd
\end_inset

 for bivariate functions 
\begin_inset Formula $z=f(x,y)$
\end_inset

.
 Generally, to minimize a real-valued differentiable function 
\begin_inset Formula $F(\mathbf{x})$
\end_inset

 (
\begin_inset Formula $\mathbf{x}$
\end_inset

 can be a vector), one can start with a guess 
\begin_inset Formula $\mathbf{x}_{0}$
\end_inset

 for a local minimum of 
\begin_inset Formula $F$
\end_inset

, and consider the sequence 
\begin_inset Formula $\mathbf{x}_{0},\mathbf{x}_{1},\mathbf{x}_{2},\dots$
\end_inset

 such that
\begin_inset Formula \[
\mathbf{x}_{n+1}=\mathbf{x}_{n}-\gamma\nabla F(\mathbf{x}_{n}),\ n=0,1,2,\cdots\]

\end_inset


\begin_inset Formula $\nabla F(\cdot)$
\end_inset

 is the gradient of the function 
\begin_inset Formula $F$
\end_inset

.
 This algorithm has an intuitive interpretation: at each iteration, move
 the current location of the minimum along the negative gradient by an amount
 of 
\begin_inset Formula $\gamma$
\end_inset

.
 Specifically, for a bivariate function, we know the gradient at a point
 is orthogonal to the contour line going through this point.
 Note 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 is almost immediately ready for an animation: we can draw the contour plot
 by 
\emph on
contour()
\emph default
, calculate the gradient by 
\emph on
deriv()
\emph default
 and use arrows to indicate the process of the iterations, which is the
 way Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:grad-desc"

\end_inset

 was constructed.
 The left animation was set to automatically begin to play when the page
 is loaded (otherwise we have to click on the animation to play), and we
 can see the arrows are moving in directions which are orthogonal to the
 contour lines.
 Since 
\begin_inset Formula $z=x^{2}+2y^{2}$
\end_inset

 is a trivial example, we will not be surprised if the arrows finally reach
 the global minimum 
\begin_inset Formula $(0,0)$
\end_inset

.
\end_layout

\begin_layout Standard
One condition for the gradient descent algorithm to work is that the step
 length 
\begin_inset Formula $\gamma$
\end_inset

 has to be small enough.
 The right animation in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:grad-desc"

\end_inset

 can demonstrate the importance of this condition especially when the objective
 function is complicated, e.g.
 it has multiple local minima.
 We need to be careful in choosing the initial guess and the step length
 in this case.
 In the animation, the step length is 0.3, which is a large value; although
 the arrows went to the direction of a local minimum in the beginning, it
 could not really reach that minimum.
 At the 12th iteration, the arrow suddenly 
\begin_inset Quotes eld
\end_inset

jumped
\begin_inset Quotes erd
\end_inset

 away, because 
\begin_inset Formula $\gamma$
\end_inset

 was too large for it to approach the minimum.
 After wiggling for a while near the local minimum, the arrows moved to
 another area and tried to get close to the local minimum there.
 This clearly gives us an impression on how the algorithm performs under
 various conditions; we can further change the location of the initial guess
 or the value of the step length to improve the process.
\end_layout

\begin_layout Standard
There are still a large amount of iterative algorithms that can be animated
 in this way such as the Newton-Raphson method or the bisection method for
 finding the roots of an equation 
\begin_inset Formula $f(x)=0$
\end_inset

, the Gibbs sampling algorithm, and the k-Means clustering algorithm and
 so on.
 The iterative nature of these methods makes them suitable candidates for
 animations, due to the duality between the computationally step-by-step
 results and the graphically step-by-step animations.
\end_layout

\begin_layout Subsection
\begin_inset OptArg
status open

\begin_layout Plain Layout
Random numbers and simulations
\end_layout

\end_inset

Random numbers and simulations
\begin_inset CommandInset label
LatexCommand label
name "sec:simulations"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<sampling-methods-a,results=tex>>=
\end_layout

\begin_layout Scrap
ani.options(interval = 1, nmax = 20)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar=rep(.5,4))
\end_layout

\begin_layout Scrap
sample.simple()
\end_layout

\begin_layout Scrap
},ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\begin_inset Newline newline
\end_inset

<<sampling-methods-b,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar=rep(.5,4))
\end_layout

\begin_layout Scrap
sample.strat(col = c("bisque", "white")) 
\end_layout

\begin_layout Scrap
},ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Scrap
<<sampling-methods-c,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar=rep(.5,4))
\end_layout

\begin_layout Scrap
sample.cluster(col = c("bisque", "white")) 
\end_layout

\begin_layout Scrap
},ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\begin_inset Newline newline
\end_inset

<<sampling-methods-d,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar=rep(.5,4))
\end_layout

\begin_layout Scrap
sample.system() 
\end_layout

\begin_layout Scrap
},ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Four basic types of sampling methods: (1) top-left: the simple random sampling
 without replacement; (2) top-right: stratified sampling -- simple random
 sampling within each stratum with possibly different sample sizes, and
 the strata are denoted by colored bands; (3) bottom-left: cluster sampling
 -- the population consist of several clusters and we sample the clusters
 instead of individual points; and (4) bottom-right: systematic sampling
 -- randomly decide the first sample point and find the rest of samples
 by a fixed increment (e.g.
 sample every 6th element).
 The solid dots represent the population, and the circles mark the samples.
 See functions 
\emph on
sample.simple()
\emph default
, 
\emph on
sample.strat()
\emph default
, 
\emph on
sample.cluster()
\emph default
 and 
\emph on
sample.system()
\emph default
 in the 
\series bold
animation
\series default
 package.
\begin_inset CommandInset label
LatexCommand label
name "fig:sampling-methods"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<buffon-needle,results=tex>>=
\end_layout

\begin_layout Scrap
set.seed(365)
\end_layout

\begin_layout Scrap
ani.options(interval = .1, nmax = 50)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 2.5, 1, 0.2), pch = 20, mgp = c(1.5, 0.5, 0)) 
\end_layout

\begin_layout Scrap
buffon.needle() 
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.95
\backslash

\backslash
linewidth',overwrite=FALSE,full.path=TRUE,ani.width=8,ani.height=8)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Simulation of Buffon's Needle: (1) top-left: simulation of randomly dropping
 needles with length 
\begin_inset Formula $L$
\end_inset

: the crossing angle is 
\begin_inset Formula $\phi$
\end_inset

 and the distance between parallel lines is 
\begin_inset Formula $D$
\end_inset

; (2) top-right: corresponding point pairs 
\begin_inset Formula $(\phi,y)$
\end_inset

, where 
\begin_inset Formula $y$
\end_inset

 is the distance from the center of the needle to the nearest parallel line;
 the needle crosses the lines if and only if 
\begin_inset Formula $y\leq\frac{L}{2}\sin(\phi)$
\end_inset

 for a given 
\begin_inset Formula $\phi$
\end_inset

 -- this is translated in the plot as 
\begin_inset Quotes eld
\end_inset

if and only if the point falls below the sine curve
\begin_inset Quotes erd
\end_inset

, and we know the probability of this event is 
\begin_inset Formula $\left(\int_{0}^{\pi}\frac{L}{2}\sin(\phi)d\phi\right)/\left(\pi\frac{D}{2}\right)=\frac{2L}{\pi D}$
\end_inset

 which can be approximated by the proportion of points below the curve;
 (3) bottom: values of 
\begin_inset Formula $\hat{\pi}$
\end_inset

 calculated from the above simulations.
 Note we only dropped the needle for 50 times in this example; in general
 this is not sufficient to obtain a reliable estimate of 
\begin_inset Formula $\pi$
\end_inset

.
 See the function 
\emph on
buffon.needle()
\emph default
 in the 
\series bold
animation
\series default
 package.
\begin_inset CommandInset label
LatexCommand label
name "fig:buffon-needle"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We often need to generate random numbers to do simulations, either to validate
 whether our theories can behave well in a simulated scenario, or to compute
 estimates based on random numbers.
 For example, we already know from the CLT that the standardized sample
 mean 
\begin_inset Formula $\sqrt{n}(\bar{X}_{n}-\mu)/\sigma$
\end_inset

 has a limiting standard normal distribution under proper conditions, so
 we may check how perfectly the distribution of the sample mean approximates
 to the normal distribution as the sample size 
\begin_inset Formula $n$
\end_inset

 increases to a very large number (theoretically infinity).
 On the other hand, we can also demonstrate effects of departure from theories,
 e.g.
 the behaviour of the sample mean when the population variance is infinite,
 which we will discuss later.
\end_layout

\begin_layout Standard
Many numerical experiments, concepts and theorems in probability theory
 and mathematical statistics can be expressed in the form of animations,
 including the classical Buffon's Needle 
\begin_inset CommandInset citation
LatexCommand citep
key "Ramaley69"

\end_inset

, the Law of Large Numbers (LLN), the CLT, the Brownian Motion, coin tosses,
 confidence intervals and so on.
 The basic idea is to display the result graphically each time we get a
 random sample.
 For instance, in the LLN, we show how the sample means are distributed
 as we increase the sample size, i.e., for a specific sample size 
\begin_inset Formula $n$
\end_inset

, we generate 
\begin_inset Formula $m$
\end_inset

 batches of random numbers with each batch of size 
\begin_inset Formula $n$
\end_inset

, compute the 
\begin_inset Formula $m$
\end_inset

 sample means and plot them; finally we can observe that the sample means
 will approach to the population mean.
\end_layout

\begin_layout Standard
Some elementary animations can be applied to the subject of survey sampling
 to demonstrate basic sampling methods, such as the simple random sampling,
 stratified sampling, and systematic sampling, etc (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sampling-methods"

\end_inset

), and one slightly advanced animation in survey sampling is about the ratio
 estimation -- we can show the ratio estimate of the population mean tends
 to be better than a simple sample average.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:buffon-needle"

\end_inset

 is a demonstration of the classical Buffon's Needle problem for approximating
 the value of 
\begin_inset Formula $\pi$
\end_inset

.
 As we drop more and more needles on the plane, the approximation will be
 closer to the true value of 
\begin_inset Formula $\pi$
\end_inset

 in general.
 This demonstration not only shows the estimate of 
\begin_inset Formula $\pi$
\end_inset

 each time the needle was dropped in a cumulative manner, but also draws
 the actual scenario (dropping needles) and the corresponding mathematical
 interpretation to assist understanding.
\end_layout

\begin_layout Subsection
Resampling methods
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement tb
wide false
sideways false
status open

\begin_layout Scrap
<<boot-iid,results=tex>>=
\end_layout

\begin_layout Scrap
set.seed(365)
\end_layout

\begin_layout Scrap
ani.options(interval = .5, nmax = 40)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 2.5, .1, 0.1), mgp = c(1.5, 0.5, 0)) 
\end_layout

\begin_layout Scrap
boot.iid(faithful$eruptions, main=c('',''),breaks=15) 
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.75
\backslash

\backslash
linewidth',overwrite=FALSE,full.path=TRUE,ani.width=7,ani.height=6)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An illustration of bootstrapping for the variable 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{eruptions}
\end_layout

\end_inset

 of the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{faithful}
\end_layout

\end_inset

 data: the original data is denoted by solid points, while the resampled
 data is marked by red points with 
\begin_inset Quotes eld
\end_inset

leaves
\begin_inset Quotes erd
\end_inset

; the number of leaves in the sunflower scatter plot means how many times
 these points are picked out, as bootstrap methods always sample 
\emph on
with
\emph default
 replacement.
 See the function 
\emph on
boot.iid()
\emph default
 in the 
\series bold
animation
\series default
 package.
\begin_inset CommandInset label
LatexCommand label
name "fig:boot-iid"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead of sampling from a theoretical distribution, which is usually a
 common case in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:simulations"

\end_inset

, there are also a lot of statistical methods that focus on sampling from
 the empirical distribution.
 This is often referred to as 
\begin_inset Quotes eld
\end_inset

resampling
\begin_inset Quotes erd
\end_inset

 in the literature.
 Typical methods include cross-validation, bootstrapping, and permutation
 methods 
\begin_inset CommandInset citation
LatexCommand citep
key "Boot94"

\end_inset

, etc.
\end_layout

\begin_layout Standard
Again, we may use animations to investigate the resampling effects if we
 keep on sampling from the empirical distribution and demonstrate the correspond
ing output each time we have obtained a new sample 
\begin_inset Formula $X^{*}$
\end_inset

.
 For example, under certain conditions, the standardized sample mean will
 converge in distribution to a normal random variable 
\begin_inset CommandInset citation
LatexCommand citep
key "Lahiri06"

\end_inset

, so we may generate several bootstrap replications of the sample mean and
 examine its convergence to normality as the sample size grows, or failing
 to converge when the original sample comes from a distribution with infinite
 variance; this is similar to the LLN case in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:simulations"

\end_inset

.
 In the bootstrap literature, perhaps the moving blocks bootstrap is a better
 candidate for animations: each time we have selected some blocks of sample
 points, we can mark these blocks up one by one to emphasize the block structure
, then show the output based on these sample blocks.
 There are also inappropriate uses of resampling, e.g., the jackknife estimate
 the standard error of the median, which has proved to be inconsistent;
 or the sampling distribution of extreme quantiles such as the maximum 
\begin_inset CommandInset citation
LatexCommand citep
key "Miller64"

\end_inset

.
 These phenomena can be demonstrated graphically, as the simplest case in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:boot-iid"

\end_inset

 will show.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:boot-iid"

\end_inset

 is an illustration of the resampling nature of bootstrapping, using the
 sunflower scatter plot.
 Each animation frame shows one replication of bootstrapping, and the density
 curve indicates the distribution of the bootstrapping sample mean.
 We keep on resampling from the original data and get a number of bootstrapping
 samples, from which we can make inference about the population mean.
\end_layout

\begin_layout Subsection
Dynamic trends
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<ObamaSpeech,results=tex>>=
\end_layout

\begin_layout Scrap
ani.options(interval = 0.5,nmax=40)
\end_layout

\begin_layout Scrap
data(ObamaSpeech)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 2.5, .1, 0.1), mgp = c(1.5, 0.5, 0)) 
\end_layout

\begin_layout Scrap
moving.block(dat = ObamaSpeech, FUN = function(..., dat = dat, 
\end_layout

\begin_layout Scrap
    i = i, block = block) {
\end_layout

\begin_layout Scrap
    plot(..., x = i + 1:block, xlab = "paragraph index", ylim = range(dat),
 
\end_layout

\begin_layout Scrap
        ylab = sprintf("ObamaSpeech[%s:%s]", i + 1, i + block))
\end_layout

\begin_layout Scrap
}, type = "o", pch = 20)
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.6
\backslash

\backslash
linewidth',overwrite=FALSE,full.path=TRUE,ani.width=6,ani.height=3.5)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Obama's acceptance speech in Chicago: the word counts from the 1st to the
 59th paragraph.
 The animation can emphasize a pattern along with time -- longer paragraphs
 and shorter paragraphs often appear alternatively.
 See the dataset 
\family typewriter
ObamaSpeech
\family default
 in this package.
\begin_inset CommandInset label
LatexCommand label
name "fig:ObamaSpeech"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The idea of animations for dynamic trends is perhaps the most natural one.
 For example, we can be show the values of a time series as time passes
 by.
 This is usually not enough in practical applications, so we need to characteriz
e patterns in the data and illustrate their changes via an animation.
 The definition of the trends in data can be quite flexible, e.g., the relationshi
p between income and expenditure (say, the regression coefficient) in a
 time span, or the cluster membership of all countries in the world using
 two socioeconomic indicators as cluster variables.
 An influential product for this type of animations is Google's 
\begin_inset Quotes eld
\end_inset

Motion Chart
\begin_inset Quotes erd
\end_inset

, which is often used to show the changes of two or three variables over
 time using the so-called 
\begin_inset Quotes eld
\end_inset

bubble chart
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Dynamic trends can be observed more clearly with the help of animations,
 and sometimes we can draw preliminary conclusions from the animation, e.g.
 there may be a 
\begin_inset Quotes eld
\end_inset

breakpoint
\begin_inset Quotes erd
\end_inset

 in a certain year because we feel a sudden change in the animation.
 After this kind of exploratory data analysis, we can do formal modeling
 and hypothesis testing such as the Chow breakpoint test 
\begin_inset CommandInset citation
LatexCommand citep
key "Chow60"

\end_inset

 to justify these findings.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ObamaSpeech"

\end_inset

 is a simple example illustrating a pattern in Obama's acceptance speech
 in Chicago in 2008; we can watch the data in successive chunks.
\end_layout

\begin_layout Standard
In an even more general sense, the meaning of 
\begin_inset Quotes eld
\end_inset

dynamic
\begin_inset Quotes erd
\end_inset

 does not have to involve with a time variable -- we may as well extend
 this 
\begin_inset Quotes eld
\end_inset

time
\begin_inset Quotes erd
\end_inset

 variable to any variables as long as they can be sorted, which essentially
 means conditioning on a variable.
 In that case, animations can be created along with the ascending or descending
 values of this conditioning variable.
\end_layout

\begin_layout Section
\begin_inset OptArg
status open

\begin_layout Plain Layout
Design and contents
\end_layout

\end_inset

Design and contents
\begin_inset CommandInset label
LatexCommand label
name "sec:design"

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 package 
\series bold
animation
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "animation"

\end_inset

 was initially written based on the above ideas in statistics, and later
 the package was also developed to be a comprehensive collection of tools
 to create animations using 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

.
 In this section, we first explain the basic schema to create an animation
 in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

, then we introduce the utilities to export animations, and finally we give
 a brief overview of existing statistical topics covered by this package,
 as well as the demos in the package.
\end_layout

\begin_layout Subsection
The basic schema
\end_layout

\begin_layout Standard
The approach to create animations in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 is fairly straightforward -- just draw plots one by one with a pause between
 these plots.
 Below is the basic schema for all the animation functions in the package:
\end_layout

\begin_layout Scrap
<<schema,eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Scrap
library(animation)
\end_layout

\begin_layout Scrap
oopt = ani.options(interval = 0.2, nmax = 10)  # set some options first
\end_layout

\begin_layout Scrap
## use a loop to create plots one by one
\end_layout

\begin_layout Scrap
for (i in 1:ani.options("nmax")) {
\end_layout

\begin_layout Scrap
    draw_plot()  # may need calculations beforehand
\end_layout

\begin_layout Scrap
    ani.pause()  # pause for a while (ani.options('interval'))
\end_layout

\begin_layout Scrap
}
\end_layout

\begin_layout Scrap
ani.options(oopt)  # restore the options in the end
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
The function 
\emph on
ani.options()
\emph default
 can be used to specify lots of options for the animation; for example,
 
\family typewriter
ani.options('interval')
\family default
 sets the time interval to pause between animation frames, and 
\family typewriter
ani.options('nmax')
\family default
 often sets the maximum number of iterations or repetitions.
 We can see from below how to use these options to design a simple demonstration
 for the Brownian motion, which has been included in this package as the
 function 
\emph on
brownian.motion()
\emph default
:
\end_layout

\begin_layout Scrap
<<brownian-motion-source,echo=TRUE>>=
\end_layout

\begin_layout Scrap
library(animation)
\end_layout

\begin_layout Scrap
brownian.motion
\end_layout

\begin_layout Scrap
## where ani.pause() was defined as this:
\end_layout

\begin_layout Scrap
ani.pause
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
The basic idea is to keep on adding an increment in the horizontal and vertical
 direction respectively, and these increments are independently and identically
 distributed as 
\begin_inset Formula $N(0,1)$
\end_inset

.
 It is of vital importance to set the axes limits as fixed -- not only for
 this particular animation, but also for other animations in which the range
 of the coordinates is changing -- otherwise we can hardly perceive the
 motion correctly without a frame of reference.
 The function 
\emph on
ani.pause()
\emph default
, based on 
\emph on
Sys.sleep()
\emph default
, was used to insert pause in the animation when it is played in an interactive
 graphics device (typically a window device), because it is simply a waste
 of time to pause under an off-screen (i.e.
 non-interactive) device when we cannot actually see the plots.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:brownian-motion"

\end_inset

 is an output of this function.
\end_layout

\begin_layout Standard
Note that although the for-loop is straightforward to create an animation,
 there are also many cases in which a while-loop becomes useful.
 Consider, for instance, the gradient descent algorithm: there are multiple
 conditions to break the loop, one of which is the absolute value of changes
 between two successive iterations (e.g., 
\begin_inset Formula $|f(x_{k+1})-f(x_{k})|<\delta$
\end_inset

).
 In this case, 
\family typewriter
ani.options('nmax')
\family default
 might be smaller than the exact number of animation frames in the output.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<brownian-motion,results=tex>>=
\end_layout

\begin_layout Scrap
set.seed(321)
\end_layout

\begin_layout Scrap
ani.options(interval = 0.1,nmax=50,ani.dev='pdf',ani.type='pdf')
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
    par(mar = c(3, 3, .1, 0.1), mgp = c(2, 0.5, 0), tcl = -0.3, 
\end_layout

\begin_layout Scrap
        cex.axis = 0.8, cex.lab = 0.8)
\end_layout

\begin_layout Scrap
    brownian.motion(pch = 21, cex = 4, col = "red", bg = "yellow",xlim=c(-12,12),
ylim=c(-12,12))
\end_layout

\begin_layout Scrap
},ani.opts='controls,loop,width=.5
\backslash

\backslash
linewidth',overwrite=FALSE,full.path=TRUE,ani.width=5,ani.height=5)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A demonstration of the Brownian motion.
\begin_inset CommandInset label
LatexCommand label
name "fig:brownian-motion"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset OptArg
status open

\begin_layout Plain Layout
Tools for exporting animations
\end_layout

\end_inset

Tools for exporting animations
\begin_inset CommandInset label
LatexCommand label
name "sub:tools"

\end_inset


\end_layout

\begin_layout Standard
Many software packages can produce animations, however, as for statistics,
 the power of statistical computations and graphics plays a more crucial
 role than animation technologies.
 The 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 language is a natural choice as the infrastructure of this 
\series bold
animation
\series default
 package, since it provides flexible computing routines and graphical facilities
, among which those low-level plotting commands are especially useful for
 generating basic elements of animations 
\begin_inset CommandInset citation
LatexCommand citep
key "Murrell05"

\end_inset

.
\end_layout

\begin_layout Standard
We can watch animations in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

's screen devices: the Windows graphics devices (under Windows) or X Window
 System graphics devices (under Linux) or Mac OS X Quartz devices (under
 Mac OS X).
 This looks like a natural choice to play animations, but there are two
 problems:
\end_layout

\begin_layout Enumerate
each time we want to replay the animation, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 has to go through all the computations again and redraw the plots; besides,
 the animations can only be watched in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

;
\end_layout

\begin_layout Enumerate
currently 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

's screen devices still lack the capability of double buffering, so the
 animations can be flickering on the screen; the performance is better under
 Windows than Linux and Mac OS.
\end_layout

\begin_layout Standard
Therefore we need to export animations from 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 for better performance, portability and to save time.
 The animation package has provided five approaches to export animations
 in other formats: HTML pages, LaTeX/PDF animations, GIF animations, Flash
 animations, and videos.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:export"

\end_inset

 is an overview of these utilities.
 We have also provided an 
\begin_inset Quotes eld
\end_inset

animation recorder
\begin_inset Quotes erd
\end_inset

 to capture all the changes in the graphics device, and this can be helpful
 when we only use low-level plotting commands to create animations.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The exporting utilities in the 
\series bold
animation
\series default
 package.
\begin_inset CommandInset label
LatexCommand label
name "tab:export"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Software dependence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Viewer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
saveHTML()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SciAnimator (JavaScript)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
any web browser
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
very flexible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
saveLatex()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
(pdf)LaTeX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Adobe Reader
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
flexible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
saveGIF()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GraphicsMagick/ImageMagick
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
most image viewers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relies on the viewer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
saveSWF()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SWF Tools
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Flash players
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relies on the viewer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
saveVideo()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FFmpeg
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Movie players
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
relies on the viewer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
HTML pages
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figure/html-interface.png
	width 4in

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The interface of the animation in the HTML page (under the Firefox browser).
 
\begin_inset CommandInset label
LatexCommand label
name "fig:html-interface"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can use the function 
\emph on
saveHTML()
\emph default
 to create an HTML page containing the animations.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:html-interface"

\end_inset

 shows the interface of the animation; basically it is just like a movie
 player -- it has buttons to play/stop the animation and navigate through
 the images, and we can change the loop mode as well as the speed.
 The animation player is based on a JavaScript library named 
\series bold
SciAnimator
\series default
; the bottom part of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:html-interface"

\end_inset

 shows the code to produce the animation with some session information for
 the sake of reproducibility.
 The 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 code is automatically added by 
\emph on
saveHTML()
\emph default
 and highlighted by the JavaScript library 
\series bold
SyntaxHighlighter
\series default
 for better readability.
 See the help page of 
\emph on
saveHTML()
\emph default
 for the references of these libraries.
\end_layout

\begin_layout Standard
The usage of 
\emph on
saveHTML()
\emph default
 is simple:
\end_layout

\begin_layout Scrap
<<usage-saveHTML,echo=TRUE>>=
\end_layout

\begin_layout Scrap
args(saveHTML)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
We only need to provide an 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 expression which can produce a sequence of images (it does not have to
 use a loop), and all other arguments are optional.
 This function will record the images using 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

's off-screen graphics devices (
\emph on
png()
\emph default
 by default; specified in 
\family typewriter
ani.options('ani.dev')
\family default
), and insert them into the HTML page by JavaScript.
 Most of the relevant options can be specified by 
\emph on
ani.options()
\emph default
, e.g., the width and height of images; the options related to the player
 can be found in the reference of 
\series bold
SciAnimator
\series default
.
 This function allows multiple animations to be embedded into the same HTML
 file -- we only need to specify the option 
\family typewriter
ani.options('htmlfile')
\family default
 to be the same each time we call 
\emph on
saveHTML()
\emph default
.
\end_layout

\begin_layout Standard
Below is the code corresponding to Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:html-interface"

\end_inset

:
\end_layout

\begin_layout Scrap
<<saveHTML,eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Scrap
saveHTML({
\end_layout

\begin_layout Scrap
    ani.options(interval = 0.05, nmax = 50)
\end_layout

\begin_layout Scrap
    par(mar = c(4, 4, .1, 0.1), mgp = c(2, 0.7, 0))
\end_layout

\begin_layout Scrap
    brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow")
\end_layout

\begin_layout Scrap
}, img.name = "bm_plot", title = "Demonstration of the Brownian Motion",
 
\end_layout

\begin_layout Scrap
    description = c("Random walk on the 2D plane: for each point", 
\end_layout

\begin_layout Scrap
        "(x, y), x = x + rnorm(1) and y = y + rnorm(1)."), ani.height=300,
 ani.width=550)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
We have built a website 
\begin_inset Quotes eld
\end_inset

AniWiki
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://animation.yihui.name
\end_layout

\end_inset

) based on the function 
\emph on
saveHTML()
\emph default
 to show the animations online, so that they can be watched by the general
 audience.
\end_layout

\begin_layout Standard
In fact we can easily extend this function for web applications, because
 what 
\emph on
saveHTML()
\emph default
 essentially does is to write HTML and JavaScript in files.
 These code can also be written to users' web browsers as the response from
 a web server.
 We have succeeded in getting Rweb 
\begin_inset CommandInset citation
LatexCommand citep
key "Rweb"

\end_inset

 to work with this function, so that the user only needs to submit 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 code in a web browser to the Rweb server, and the server will generate
 the images and return an animation page to the user.
 This make it possible for users to create animations without 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 locally installed.
 There is a demo file in the package that can show this idea (it depends
 on the availability of the Rweb server):
\end_layout

\begin_layout Scrap
<<Rweb-demo,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Scrap

\family typewriter
system.file('misc', 'Rweb', 'demo.html', package = 'animation')
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Subsubsection
\begin_inset OptArg
status open

\begin_layout Plain Layout
PDF animations
\end_layout

\end_inset

PDF animations via LaTeX
\end_layout

\begin_layout Standard
The LaTeX package 
\series bold
animate
\series default
 by 
\begin_inset CommandInset citation
LatexCommand citet
key "animate"

\end_inset

 is capable of inserting animations into a PDF document, and the animations
 are also driven by JavaScript.
 This can be quite helpful, yet is not widely used in our papers or reports.
 There was an editorial in the JCGS by 
\begin_inset CommandInset citation
LatexCommand citet
key "Levine10"

\end_inset

 encouraging authors to take the advantage of animations and movies when
 publishing electronic papers; the function 
\emph on
saveLatex()
\emph default
 in the 
\series bold
animation
\series default
 package is one tool to fulfill this mission.
 This function can be used either as a standalone utility to create PDF
 animations, or in a Sweave document to insert animations dynamically.
 It will automatically detect if it is called in Sweave and output LaTeX
 code accordingly.
\end_layout

\begin_layout Standard
The usage of 
\emph on
saveLatex()
\emph default
 is similar to 
\emph on
saveHTML()
\emph default
, except that it involves with several LaTeX-related arguments:
\end_layout

\begin_layout Scrap
<<saveLatex-usage,echo=TRUE>>=
\end_layout

\begin_layout Scrap
args(saveLatex)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
Again, the most important argument is 
\family typewriter
expr
\family default
 (a code chunk), and the rest of arguments are optional.
 It will open a graphics device (specified in 
\family typewriter
ani.options('ani.dev')
\family default
) to record all the plots in 
\family typewriter
expr
\family default
, then insert the LaTeX code based on the syntax of the 
\series bold
animate
\series default
 package, e.g., 
\family typewriter

\backslash
animategraphics[controls]{5}{Rplot}{1}{50}
\family default
, which will produce an animation possibly from a graphics file 
\begin_inset Quotes eld
\end_inset


\family typewriter
Rplot.pdf
\family default

\begin_inset Quotes erd
\end_inset

 using the pages from 1 to 50 (or from 
\family typewriter
Rplot1.png
\family default
, ..., 
\family typewriter
Rplot50.png
\family default
, depending the graphics device we use), and the time interval between animation
 frames is 
\begin_inset Formula $1/5=0.2$
\end_inset

 seconds.
 See the documentation of the 
\series bold
animate
\series default
 package for details.
\end_layout

\begin_layout Standard
The source code behind Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:brownian-motion"

\end_inset

 is as below, which is a Sweave code chunk with the option 
\family typewriter
results=tex
\family default
 in order to output LaTeX code:
\end_layout

\begin_layout Scrap
<<brownian-motion-echo,eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Scrap
<<brownian-motion>>
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
All the animations in this paper were made in this way.
 There is a demo in this package, 
\family typewriter
demo('Sweave_animation', package = 'animation')
\family default
, which is a complete example to show how to use 
\emph on
saveLatex()
\emph default
 with Sweave (the Sweave source document is 
\family typewriter
system.file('misc', 'Sweave_animation.Rnw', package = 'animation')
\family default
).
\end_layout

\begin_layout Standard
Generally we recommend using PDF graphics because of the high quality, but
 the file size can easily get too large, since 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

's 
\emph on
pdf()
\emph default
 device does not support compression of PDF graphics.
 To solve this problem, we wrote two wrappers, 
\emph on
qpdf()
\emph default
 and 
\emph on
pdftk()
\emph default
, for two additional software packages 
\series bold
qpdf
\series default
 and 
\series bold
pdftk
\series default
 respectively; if either of them is available in the system, the PDF graphics
 will be compressed before being processed to animations.
\end_layout

\begin_layout Subsubsection
GIF animations, Flash animations and videos
\end_layout

\begin_layout Standard
Both JavaScript and LaTeX are common tools, so users can easily create the
 HTML and PDF animations, and we still have other three approaches: 
\emph on
saveGIF()
\emph default
, 
\emph on
saveSWF()
\emph default
 and 
\emph on
saveVideo()
\emph default
, which rely on three less common third-party software packages GraphicsMagick/I
mageMagick, SWF Tools, and FFmpeg, respectively.
 These functions are merely wrappers to these tools, i.e., they will call
 these tools through command lines to convert 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 images to other animation formats.
 Specifically, 
\emph on
saveGIF()
\emph default
 uses the command 
\family typewriter
gm convert
\family default
 (GraphicsMagick) or 
\family typewriter
convert
\family default
 (ImageMagick) to create GIF animations; 
\emph on
saveSWF()
\emph default
 calls 
\family typewriter
png2swf
\family default
, 
\family typewriter
jpeg2swf
\family default
 or 
\family typewriter
pdf2swf
\family default
 in SWF Tools to convert images to Flash animations; 
\emph on
saveVideo()
\emph default
 calls the command 
\family typewriter
ffmpeg
\family default
 in the FFmpeg library to convert images to a video (some common formats
 include Ogg, MP4 and AVI).
\end_layout

\begin_layout Standard
All of the three functions share a similar usage to 
\emph on
saveHTML()
\emph default
 or 
\emph on
saveLatex()
\emph default
, and the difference is that we may need to specify the location of these
 tools especially under Windows:
\end_layout

\begin_layout Scrap
<<saveGIF-usage,echo=TRUE>>=
\end_layout

\begin_layout Scrap
args(saveGIF)
\end_layout

\begin_layout Scrap
args(saveSWF)
\end_layout

\begin_layout Scrap
args(saveVideo)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
A large amount of work was done for Windows to search for the location of
 these software packages automatically, so that Windows users do not have
 to be familiar with command lines.
 The paths of these tools can be pre-specified in 
\emph on
ani.options()
\emph default
.
\end_layout

\begin_layout Subsubsection
The animation recorder
\end_layout

\begin_layout Standard
There is a difficulty in exporting the animations made purely by low-level
 plotting commands, because the off-screen graphics devices (e.g.
 the 
\emph on
png()
\emph default
 device) can only capture high-level plotting changes as new image files.
 For instance, even if we keep on adding points to a plot and it seems to
 be changing on screen, but when we put the code under an off-screen device,
 we will only get one image in the end.
 To solve this problem, we can use the function 
\emph on
recordPlot()
\emph default
 in the 
\series bold
grDevices
\series default
 package to record all the changes as a list, then replay them using 
\emph on
replayPlot()
\emph default
.
 There are two functions 
\emph on
ani.record()
\emph default
 and 
\emph on
ani.replay()
\emph default
 based on these functions in this package, which can act as an 
\begin_inset Quotes eld
\end_inset

animation recorder
\begin_inset Quotes erd
\end_inset

.
 Here is an example that shows the a one-dimensional random walk by adding
 points on an empty plot:
\end_layout

\begin_layout Scrap
<<ani-record,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Scrap
oopt = ani.options(nmax = 50, interval = .1)
\end_layout

\begin_layout Scrap
x = cumsum(rnorm(n=ani.options('nmax')))
\end_layout

\begin_layout Scrap
ani.record(reset=TRUE)  # clear history first
\end_layout

\begin_layout Scrap
par(bg = 'white', mar=c(4,4,.1,.1))
\end_layout

\begin_layout Scrap
plot(x, type = 'n')
\end_layout

\begin_layout Scrap
for (i in 1:length(x)) {
\end_layout

\begin_layout Scrap
points(i, x[i])
\end_layout

\begin_layout Scrap
ani.record()  # record the current plot
\end_layout

\begin_layout Scrap
}
\end_layout

\begin_layout Scrap
## replay the animation
\end_layout

\begin_layout Scrap
ani.replay()
\end_layout

\begin_layout Scrap
## we can also export it with, e.g.
 saveHTML(ani.replay())
\end_layout

\begin_layout Scrap
ani.options(oopt)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Subsubsection
\begin_inset OptArg
status open

\begin_layout Plain Layout
Other R packages
\end_layout

\end_inset

Other 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 packages
\end_layout

\begin_layout Standard
There are a few other 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 packages to export animations; for example, the 
\series bold
SVGAnnotation
\series default
 package by 
\begin_inset CommandInset citation
LatexCommand citet
key "SVGAnnotation"

\end_inset

 can create a simple SVG (Scalable Vector Graphics) animation using the
 function 
\emph on
animate()
\emph default
 to animate scatter plots like the Google Motion Chart, and the 
\series bold
R2SWF
\series default
 package by 
\begin_inset CommandInset citation
LatexCommand citet
key "R2SWF"

\end_inset

 can create a Flash animation by converting bitmap images to a SWF (ShockWave
 Flash) file based on the Ming library.
 These packages can be run on their own, i.e., they are not simply wrappers
 for third-party software packages.
 There is yet another package named 
\series bold
swfDevice
\series default
 to create Flash animations, which has not been released to CRAN but looks
 useful as well (currently on R-Forge).
\end_layout

\begin_layout Subsection
Topics in statistics
\end_layout

\begin_layout Standard
This package contains a large variety of functions for animations in statistics,
 covering topics in several areas such as probability theory, mathematical
 statistics, multivariate statistics, nonparametric statistics, sampling
 survey, linear models, time series, computational statistics, data mining
 and machine learning, etc.
 These functions might be of help both in teaching statistics and in data
 analysis.
\end_layout

\begin_layout Standard
As of version 2.0-2, there are nearly 30 functions related to statistics
 in this package: 
\end_layout

\begin_layout Description

\emph on
bisection.method()
\emph default
 the bisection method for root-finding on an interval
\end_layout

\begin_layout Description

\emph on
boot.iid()
\emph default
 bootstrapping for i.i.d data (demonstrate the idea of sampling with replacement)
\end_layout

\begin_layout Description

\emph on
brownian.motion()
\emph default
,
\begin_inset space \space{}
\end_inset


\emph on
BM.circle(),
\begin_inset space \space{}
\end_inset

g.brownian.motion()
\emph default
 different demonstrations of the Brownian motion on the 2D plane
\end_layout

\begin_layout Description

\emph on
buffon.needle()
\emph default
 simulation of the Buffon's needle problem to approximate 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Description

\emph on
clt.ani()
\emph default
 demonstration of the Central Limit Theorem (also shows the goodness-of-fit
 to the Normal distribution as the sample size increases)
\end_layout

\begin_layout Description

\emph on
conf.int()
\emph default
 demonstration of the concept of confidence intervals
\end_layout

\begin_layout Description

\emph on
cv.ani()
\emph default
 demonstration of the concept of cross-validation
\end_layout

\begin_layout Description

\emph on
flip.coin()
\emph default
 simulation of flipping coins 
\end_layout

\begin_layout Description

\emph on
grad.desc()
\emph default
 the gradient descent algorithm
\end_layout

\begin_layout Description

\emph on
kmeans.ani()
\emph default
 the k-Means cluster algorithm (show the changes of cluster labels and the
 move of cluster centers)
\end_layout

\begin_layout Description

\emph on
knn.ani()
\emph default
 the kNN classification algorithm
\end_layout

\begin_layout Description

\emph on
least.squares()
\emph default
 demonstration of least squares estimation (show how the residual sum of
 squares changes when the coefficients change)
\end_layout

\begin_layout Description

\emph on
lln.ani()
\emph default
 the Law of Large Numbers 
\end_layout

\begin_layout Description

\emph on
MC.hitormiss()
\emph default
,
\begin_inset space \thinspace{}
\end_inset


\emph on
MC.samplemean()
\emph default
 two approaches of the Monte Carlo integration
\end_layout

\begin_layout Description

\emph on
mwar.ani()
\emph default
 the moving window auto-regression
\end_layout

\begin_layout Description

\emph on
newton.method()
\emph default
 the Newton-Raphson method for root-finding 
\end_layout

\begin_layout Description

\emph on
quincunx()
\emph default
 demonstration of the Quincunx (i.e.
 the Bean Machine) to show the Normal distribution coming from the falling
 beans
\end_layout

\begin_layout Description

\emph on
sample.cluster()
\emph default
 the cluster sampling 
\end_layout

\begin_layout Description

\emph on
sample.simple()
\emph default
 the simple random sampling without replacement 
\end_layout

\begin_layout Description

\emph on
sample.strat()
\emph default
 the stratified sampling
\end_layout

\begin_layout Description

\emph on
sample.system()
\emph default
 the systematic sampling
\end_layout

\begin_layout Description

\emph on
sample.ratio()
\emph default
 the demonstration of advantages of the ratio estimation in survey sampling
 
\end_layout

\begin_layout Description

\emph on
sim.qqnorm()
\emph default
 the simulation of QQ plots to show how they look like if the data really
 comes from the Normal distribution
\end_layout

\begin_layout Subsection
Demos
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<rgl-animation,results=tex>>=
\end_layout

\begin_layout Scrap
demo('rgl_animation', echo=FALSE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A 3D animation demo (created by the 
\series bold
rgl
\series default
 package): the classical 
\family typewriter
pollen
\family default
 data.
\begin_inset CommandInset label
LatexCommand label
name "fig:rgl-animation"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Demos are an important part of this package.
 They can be divided into two groups: some are purely for entertaining purposes,
 and the others can demonstrate additional capabilities and applications
 of this package.
 Here we introduce a selective subset of these demos.
\end_layout

\begin_layout Standard
For the 
\emph on
saveXXX()
\emph default
 functions in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:tools"

\end_inset

, we can extend them in flexible ways.
 For example, we do not have to restrict ourselves by the common 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 graphics devices; we can use arbitrary devices, as long as we follow the
 
\begin_inset Quotes eld
\end_inset

naming template
\begin_inset Quotes erd
\end_inset

 for image files.
 This is explained in detail in the options 
\family typewriter
use.dev
\family default
 and 
\family typewriter
img.fmt
\family default
 in the help page of 
\emph on
ani.options()
\emph default
.
 The 
\family typewriter
demo('rgl_animation')
\family default
 shows how to capture the 3D plots created by the 
\series bold
rgl
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citep
key "rgl"

\end_inset

; see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rgl-animation"

\end_inset

 for the animation, which was embedded in this paper using Sweave, too.
 This demo is actually a quick summary of the 1986 ASA Data Expo -- looking
 for patterns in a synthetic dataset.
 The original plot seems to be nothing but a point cloud, but there are
 six capital letters 
\begin_inset Quotes eld
\end_inset

EUREKA
\begin_inset Quotes erd
\end_inset

 hidden in it; we can clearly see them by zooming into the points.
 A similar demo is 
\family typewriter
demo('ggobi_animation')
\family default
 -- it shows how to record plots in GGobi and create an HTML animation page.
\end_layout

\begin_layout Standard
Another demo shows that we can even download images from the Internet, and
 wrap them into an animation with 
\emph on
saveHTML()
\emph default
; see 
\family typewriter
demo('flowers')
\family default
.
 This again indicates the flexibility of the 
\series bold
animation
\series default
 package.
 To learn how they work, we can take a look at the source code:
\end_layout

\begin_layout Scrap
<<demo-rgl,eval=FALSE,echo=TRUE>>=
\end_layout

\begin_layout Scrap
file.show(system.file('demo', 'rgl_animation.R', package='animation'))
\end_layout

\begin_layout Scrap
file.show(system.file('demo', 'flowers.R', package='animation'))
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
Some entertaining demos include 
\family typewriter
demo('game_of_life')
\family default
 (three types of the famous 
\begin_inset Quotes eld
\end_inset

Game of Life
\begin_inset Quotes erd
\end_inset

), 
\family typewriter
demo('hanoi')
\family default
 (the recursive algorithm of the classical game 
\begin_inset Quotes eld
\end_inset

Tower of Hanoi
\begin_inset Quotes erd
\end_inset

), and 
\family typewriter
demo('fire')
\family default
 (a simulation of the fire flames) and so on.
 Finally, we can also demonstrate interesting datasets in animations, e.g.,
 
\family typewriter
demo('CLEvsLAL')
\family default
 is a 
\begin_inset Quotes eld
\end_inset

playback
\begin_inset Quotes erd
\end_inset

 of an NBA game between Cavaliers and Lakers on Dec 25, 2009; at each time
 point, we can clearly see the location of the current player, and whether
 he made the goal or not.
\end_layout

\begin_layout Section
\begin_inset OptArg
status open

\begin_layout Plain Layout
Examples
\end_layout

\end_inset

Examples
\begin_inset CommandInset label
LatexCommand label
name "sec:examples"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<sim-qqnorm-a,results=tex>>=
\end_layout

\begin_layout Scrap
set.seed(127)
\end_layout

\begin_layout Scrap
ani.options(nmax = 30)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 3, 1, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3) 
\end_layout

\begin_layout Scrap
sim.qqnorm(20,asp=1,xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))
\end_layout

\begin_layout Scrap
},interval=.2,ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\begin_inset Newline newline
\end_inset

<<sim-qqnorm-b,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 3, 1, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3) 
\end_layout

\begin_layout Scrap
sim.qqnorm(100,asp=1,xlim=c(-2.5,2.5),ylim=c(-2.5,2.5))
\end_layout

\begin_layout Scrap
},interval=.2,ani.opts='controls,loop,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
The QQ plot for random numbers from 
\begin_inset Formula $N(0,1)$
\end_inset

 with a sample size 20 (left) and 100 (right) respectively.
\begin_inset CommandInset label
LatexCommand label
name "fig:sim-qqnorm"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this section we give three examples illustrating the application of animation
s to both statistical theories and data analysis.
 The first example shows we can construct simple but convincing animations
 to explain how to interpret QQ plots reasonably; the second example quickly
 shows how the sample mean behaves when the conditions for CLT are not satisfied
; the third one gives the process of cross-validation.
\end_layout

\begin_layout Standard

\series bold
Example 1 (QQ plots for different sample sizes)
\series default
 QQ plots are often used to check the normality of residuals in linear regressio
ns.
 In practice, we may over-interpret these plots -- departure of the points
 from a straight line does not necessarily mean a severe contradiction with
 normality.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sim-qqnorm"

\end_inset

 shows several QQ plots for different batches of random numbers which are
 really from the standard Normal distribution, however, we can clearly see
 that few of them really fall on the diagonal (i.e.
 the line 
\begin_inset Formula $y=x$
\end_inset

) in the left plot, and there are almost always a few points in the tails
 which are far away from the diagonal in the right plot.
\end_layout

\begin_layout Standard
These two animations correspond to the sample size 20 and 100 respectively.
 When the sample size is small, QQ plots might give us a fairly high Type
 I error rate (reject normality even if the sample really comes from the
 Normal distribution); on the other hand, we should not pay too much attention
 to 
\begin_inset Quotes eld
\end_inset

outliers
\begin_inset Quotes erd
\end_inset

 in the tails in QQ plots when the sample size is large.
\end_layout

\begin_layout Standard
To see how quickly and easily we can write such an animation function, we
 may look at the source code of the function 
\emph on
sim.qqnorm()
\emph default
, which created the animations in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sim-qqnorm"

\end_inset

:
\end_layout

\begin_layout Scrap
<<sim-qqnorm-source,echo=TRUE>>=
\end_layout

\begin_layout Scrap
sim.qqnorm
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<clt-ani-a,results=tex>>=
\end_layout

\begin_layout Scrap
set.seed(721)
\end_layout

\begin_layout Scrap
ani.options(interval = .5, nmax = 50)
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3) 
\end_layout

\begin_layout Scrap
clt.ani(FUN=runif, mean=.5, sd=sqrt(1/12))
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\begin_inset Newline newline
\end_inset

<<clt-ani-b,results=tex>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
par(mar = c(3, 3, .2, 0.1), mgp = c(1.5, 0.5, 0), tcl = -0.3) 
\end_layout

\begin_layout Scrap
clt.ani(FUN=rcauchy, mean=NULL)
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.49
\backslash

\backslash
linewidth',centering=FALSE,overwrite=FALSE,full.path=TRUE)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
The normality of the sample mean 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

 as the sample size 
\begin_inset Formula $n$
\end_inset

 increases from 1 to 50 with 
\begin_inset Formula $X\sim Unif(0,1)$
\end_inset

 (left) and 
\begin_inset Formula $Cauchy(0,1)$
\end_inset

 (right); the dashed line is the theoretical limiting density curve.
\begin_inset CommandInset label
LatexCommand label
name "fig:clt-ani"

\end_inset

 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Example 2 (Limiting distribution of the sample mean)
\series default
 The function 
\emph on
clt.ani()
\emph default
 was designed to demonstrate the Central Limit Theorem, i.e., to illustrate
 the limiting distribution of 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

 as 
\begin_inset Formula $n$
\end_inset

 increases.
 In the animation, the density of 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

 is estimated from a number of simulated mean values based on a given sample
 size 
\begin_inset Formula $n$
\end_inset

.
 
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:clt-ani"

\end_inset

 is a comparison for the distributions of the sample means when 
\begin_inset Formula $n=50$
\end_inset

.
 The population distributions in the left and right animations are the Uniform
 and Cauchy distributions respectively.
 We know the latter one does not satisfy the condition of finite variance
 in CLT, hence it should not give us any bell-shaped density curves no matter
 how large the sample size is, which is true according to the right animation
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:clt-ani"

\end_inset

.
 The upper plot is the histogram overlaid with a density curve to show the
 distribution of 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

 (the dashed line denotes the theoretical limiting distribution), and the
 lower plot shows the corresponding P-values from the Shapiro-Wilk test
 of normality -- larger P-values indicate better fit with normality in general.
 The demonstration of CLT is an extremely old idea, and there exists a large
 number of demos, but very few of them emphasized the goodness-of-fit to
 normality -- usually they merely show how the density curve of the sample
 mean can become bell-shaped, but 
\begin_inset Quotes eld
\end_inset

being bell-shaped
\begin_inset Quotes erd
\end_inset

 alone could be far from normality.
 Therefore we especially added the theoretical limiting density curve as
 well as the P-values in order that readers have an idea about the departure
 from the theoretical normality.
 For example, we know for 
\begin_inset Formula $Unif(0,1)$
\end_inset

, 
\begin_inset Formula $\bar{X}_{n}\overset{d}{\rightarrow}N(\frac{1}{2},\frac{1}{12n})$
\end_inset

, so we can draw the limiting density curve to compare with the empirical
 density curve of 
\begin_inset Formula $\bar{X}_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Scrap
<<gene-expr-data,results=hide,cache=TRUE>>=
\end_layout

\begin_layout Scrap
saveLatex({
\end_layout

\begin_layout Scrap
set.seed(130)
\end_layout

\begin_layout Scrap
library(hddplot)
\end_layout

\begin_layout Scrap
data(Golub)
\end_layout

\begin_layout Scrap
data(golubInfo)
\end_layout

\begin_layout Scrap
ani.options(nmax=10)
\end_layout

\begin_layout Scrap
par(mar = c(3, 3, 0.2, 0.7), mgp = c(1.5, 0.5, 0))
\end_layout

\begin_layout Scrap
res=cv.nfeaturesLDA(t(Golub), cl=golubInfo$cancer,k=5,cex.rg=c(0,3),pch=19)
\end_layout

\begin_layout Scrap
},ani.opts='controls,width=.8
\backslash

\backslash
linewidth',overwrite=FALSE,full.path=TRUE,ani.height=4,ani.width=7)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Scrap
<<gene-expr-plot,results=tex>>=
\end_layout

\begin_layout Scrap
<<gene-expr-data>>
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
An illustration of the 5-fold cross-validation for finding the optimum number
 of gene features based on LDA.
 The left plot shows the correct rate (denoted by the size of dots); the
 right plot shows the test data on the first 2 discriminant axes; correct
 predictions and misclassified cases are marked by different colors.
\begin_inset CommandInset label
LatexCommand label
name "fig:golub"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Example 3 (Classification of gene expression data)
\series default
 It is very common that the gene expression data is high-dimensional with
 variables far more than observations.
 We may hope to use as less variables as possible to build predictive models,
 since too many variables can bring the problem of overfitting.
 The main ideas in this example are borrowed from 
\begin_inset CommandInset citation
LatexCommand citet
after "pp. 400"
key "Maindonald07"

\end_inset

, but here we only illustrate the process of cross-validation and the correspond
ing results.
\end_layout

\begin_layout Standard
Suppose we want to find out the optimum number (say, less than 
\begin_inset Formula $g_{\mathrm{max}}=10$
\end_inset

) of features in the linear discriminant analysis (LDA) using a 5-fold cross-val
idation.
 The procedure is like this:
\end_layout

\begin_layout Quote
Split the whole data randomly into 5 folds: 
\end_layout

\begin_deeper
\begin_layout Quote
For the number of features 
\begin_inset Formula $g=1,2,\cdots,10$
\end_inset

, choose 
\begin_inset Formula $g$
\end_inset

 features that have the largest discriminatory power (measured by the 
\begin_inset Formula $F$
\end_inset

-statistic in ANOVA): 
\end_layout

\begin_deeper
\begin_layout Quote
For the fold 
\begin_inset Formula $i$
\end_inset

 (
\begin_inset Formula $i=1,2,\cdots,5$
\end_inset

): 
\end_layout

\begin_deeper
\begin_layout Quote
Train a LDA model without the 
\begin_inset Formula $i$
\end_inset

-th fold data, and predict with the 
\begin_inset Formula $i$
\end_inset

-th fold for a proportion of correct predictions 
\begin_inset Formula $\bar{p}_{gi}$
\end_inset

; 
\end_layout

\end_deeper
\end_deeper
\begin_layout Quote
Average the 5 proportions to get the correct rate 
\begin_inset Formula $\bar{p}_{g\cdot}$
\end_inset

; 
\end_layout

\end_deeper
\begin_layout Quote
Determine the optimum number of features as 
\begin_inset Formula $\arg\underset{g}{\max}\bar{p}_{g\cdot}$
\end_inset

.
 
\end_layout

\begin_layout Standard
This procedure was implemented in the function 
\emph on
cv.nfeaturesLDA()
\emph default
 in the 
\series bold
animation
\series default
 package, and we use the datasets 
\family typewriter
Golub
\family default
 and 
\family typewriter
golubInfo
\family default
 from the 
\series bold
hddplot
\series default
 package.
 The goal is to correctly classify three cancer types (
\family typewriter
allB
\family default
, 
\family typewriter
allT
\family default
 and 
\family typewriter
aml
\family default
) using as less variables as possible from all the 7129 features.
\end_layout

\begin_layout Standard
In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:golub"

\end_inset

, points with sizes proportional to the rates of correct predictions are
 moving from bottom to top and left to right, which demonstrates the process
 of 
\begin_inset Formula $k$
\end_inset

-fold cross-validation (1 to 
\begin_inset Formula $k$
\end_inset

 on the y-axis) and the increasing number of features (1 to 
\begin_inset Formula $g_{\mathrm{max}}$
\end_inset

 on the x-axis), respectively.
 For a fixed number 
\begin_inset Formula $g$
\end_inset

, we denote the rate of correct predictions 
\begin_inset Formula $p_{gi}$
\end_inset

 for 
\begin_inset Formula $i=1,2,\cdots,k$
\end_inset

 one by one in the vertical direction, and then move to the next number
 
\begin_inset Formula $g+1$
\end_inset

.
 The average rates are computed and denoted at the bottom of the graph;
 points that marked by 
\begin_inset Quotes eld
\end_inset


\family typewriter
?
\family default

\begin_inset Quotes erd
\end_inset

 denote unknown 
\begin_inset Formula $p_{gi}$
\end_inset

, i.e., they have not been computed yet.
 In the end, we only have to find out the number 
\begin_inset Formula $g$
\end_inset

 corresponding to the biggest point in the bottom.
 The results are as follows:
\end_layout

\begin_layout Scrap
<<gene-results,echo=TRUE,eval=FALSE>>=
\end_layout

\begin_layout Scrap
set.seed(130)
\end_layout

\begin_layout Scrap
library(hddplot)
\end_layout

\begin_layout Scrap
data(Golub)
\end_layout

\begin_layout Scrap
data(golubInfo)
\end_layout

\begin_layout Scrap
ani.options(nmax=10)
\end_layout

\begin_layout Scrap
res=cv.nfeaturesLDA(t(Golub), cl=golubInfo$cancer,k=5,cex.rg=c(0,3),pch=19)
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Scrap
<<accuracy, echo=TRUE>>=
\end_layout

\begin_layout Scrap
res
\end_layout

\begin_layout Scrap
@
\end_layout

\begin_layout Standard
We achieved the maximum accuracy in prediction when the number of features
 is 9.
 In fact, this example is more a 
\begin_inset Quotes eld
\end_inset

slide show
\begin_inset Quotes erd
\end_inset

 than a real animation, but it can be a helpful tool to explain the procedure.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
The goal of the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{S}
\end_layout

\end_inset

 language was 
\begin_inset Quotes eld
\end_inset

to turn ideas into software, quickly and faithfully
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Chambers98"

\end_inset

; for the 
\series bold
animation
\series default
 package, the goal is 
\begin_inset Quotes eld
\end_inset

to turn ideas into animations (quickly and faithfully)
\begin_inset Quotes erd
\end_inset

.
 This package won the John M.
 Chambers Statistical Software Award (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://stat-computing.org/awards/jmc/
\end_layout

\end_inset

) in 2009.
\end_layout

\begin_layout Standard
In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:connection"

\end_inset

, we have reviewed the close relationship between animations and statistics
 in certain aspects.
 We can use animations to illustrate every single step of iterative algorithms,
 show all the results from simulations or resampling methods in detail,
 and characterize dynamic trends in data.
\end_layout

\begin_layout Standard
Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:design"

\end_inset

 introduced the design and contents of this package.
 The programming schema for the animation functions is quite simple but
 effective, and animations made from this schema can help us better understand
 statistical methods and concepts, and gain insights into data.
 This package contains nearly 30 demonstrations for statistical topics,
 as well as more than 20 demos for other topics such as computer games or
 novel applications of some functions in this package.
\end_layout

\begin_layout Standard
The examples in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:examples"

\end_inset

 have shown the advantage of animations in both demonstrating statistical
 theories and results of data analysis: the procedures illustrated step
 by step are fairly clear, and the results can be observed on the fly.
 In traditional static printed reports and papers, these dynamic information
 cannot be conveyed conveniently.
\end_layout

\begin_layout Standard
We have also introduced the reproducibility of animations in this paper,
 and the 
\series bold
animation
\series default
 package has functions to incorporate with reproducibility.
 For example, the 
\emph on
saveHTML()
\emph default
 function can write the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

 code into an HTML page, so that users can copy and paste the code to reproduce
 the animations; 
\emph on
saveLatex()
\emph default
 can be used in the Sweave environment to insert animations into LaTeX documents
, which usually will be compiled to PDF documents, so that we can watch
 animations in the PDF documents.
\end_layout

\begin_layout Standard
\begin_inset CommandInset citation
LatexCommand citet
key "Xie08"

\end_inset

 is an introductory article for this package in the 
\emph on
R News
\emph default
, and since then, there have been a large amount of improvements in terms
 of usability, consistency, documentation, new topics in statistics, and
 additional utilities.
 Currently we have included comprehensive utilities for exporting animations
 in 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
proglang{R}
\end_layout

\end_inset

, and in future the main direction is to contribute more functions related
 to statistics.
 Depending on the demand of users, we may also consider the development
 of a GUI for this package using, for example, the 
\series bold
gWidgets
\series default
 package.
\end_layout

\begin_layout Section*
Acknowledgments
\end_layout

\begin_layout Standard
I'm especially grateful to John Maindonald for his generous help on the
 manuscript and suggestions to this package ever since early 2008.
 I'd also like to thank the anonymous reviewer for the helpful comments.
 Besides, I appreciate all the suggestions and feedback from the users,
 without whom this package would not have achieved its current quality and
 flexibility (see 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{news(package = "animation")}
\end_layout

\end_inset

).
 I thank the authors of open source software packages ImageMagick, GraphicsMagic
k, SWF Tools, FFmpeg, the LaTeX package animate, the JavaScript libraries
 SciAnimator and SyntaxHighlighter, qpdf and pdftk.
 Finally, the 2009 John M.
 Chambers Statistical Software Award was a substantial encouragement to
 the development of this package, and I thank Dr Chambers as well as the
 award committee.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "animation-jss"

\end_inset


\end_layout

\end_body
\end_document
